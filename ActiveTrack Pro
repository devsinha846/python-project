<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ActiveTrack - Fitness Tracker with Exercise Library</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        
        :root {
            --primary-color: #3b82f6;
            --secondary-color: #1e40af;
            --accent-color: #10b981;
            --dark-color: #1f2937;
            --light-color: #f9fafb;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f3f4f6;
        }
        
        .exercise-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        
        .progress-ring__circle {
            transition: stroke-dashoffset 0.8s ease-in-out;
            transform: rotate(-90deg);
            transform-origin: 50% 50%;
        }
        
        .animated-check {
            animation: checkmark 0.2s ease;
        }
        
        @keyframes checkmark {
            0% { transform: scale(0); opacity: 0; }
            80% { transform: scale(1.2); opacity: 1; }
            100% { transform: scale(1); opacity: 1; }
        }
        
        /* Tab styles */
        .tab-button {
            transition: all 0.3s ease;
        }
        
        .tab-button.active {
            border-bottom: 3px solid var(--primary-color);
            color: var(--primary-color);
            font-weight: 600;
        }
    </style>
</head>
<body class="min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <header class="flex justify-between items-center mb-10">
            <div class="flex items-center">
                <div class="w-12 h-12 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold text-xl mr-3">AT</div>
                <h1 class="text-3xl font-bold text-gray-800">ActiveTrack</h1>
            </div>
            <div class="flex items-center space-x-4">
                <div class="relative">
                    <button id="userMenuBtn" class="flex items-center space-x-2 focus:outline-none">
                        <img src="https://placehold.co/40x40" alt="User profile picture" class="w-10 h-10 rounded-full object-cover">
                        <span class="text-gray-700 font-medium">John D.</span>
                    </button>
                    <div id="userMenu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-10">
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Profile</a>
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Settings</a>
                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sign out</a>
                    </div>
                </div>
            </div>
        </header>

        <!-- Navigation Tabs -->
        <div class="flex mb-8 border-b border-gray-200">
            <button id="dashboardTab" class="tab-button active px-4 py-2 mr-2 text-gray-700 font-medium">Dashboard</button>
            <button id="workoutTab" class="tab-button px-4 py-2 mr-2 text-gray-700 font-medium">My Workouts</button>
            <button id="exercisesTab" class="tab-button px-4 py-2 mr-2 text-gray-700 font-medium">Exercise Library</button>
            <button id="progressTab" class="tab-button px-4 py-2 text-gray-700 font-medium">Progress</button>
        </div>

        <!-- Dashboard Content (default shown) -->
        <div id="dashboardContent" class="tab-content">
            <!-- Stats Overview -->
            <section class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-10">
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex justify-between items-start">
                        <div>
                            <p class="text-gray-500">Weekly Workouts</p>
                            <h3 class="text-3xl font-bold text-gray-800">4</h3>
                            <p class="text-green-500 text-sm mt-1">+1 from last week</p>
                        </div>
                        <div class="bg-blue-100 p-3 rounded-lg">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                            </svg>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex justify-between items-start">
                        <div>
                            <p class="text-gray-500">Calories Burned</p>
                            <h3 class="text-3xl font-bold text-gray-800">1,870</h3>
                            <p class="text-green-500 text-sm mt-1">15% increase</p>
                        </div>
                        <div class="bg-purple-100 p-3 rounded-lg">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                            </svg>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex justify-between items-start">
                        <div>
                            <p class="text-gray-500">Active Minutes</p>
                            <h3 class="text-3xl font-bold text-gray-800">148</h3>
                            <p class="text-red-500 text-sm mt-1">10% decrease</p>
                        </div>
                        <div class="bg-yellow-100 p-3 rounded-lg">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex justify-between items-start">
                        <div>
                            <p class="text-gray-500">Current Streak</p>
                            <h3 class="text-3xl font-bold text-gray-800">5 days</h3>
                            <p class="text-green-500 text-sm mt-1">Keep it up!</p>
                        </div>
                        <div class="bg-red-100 p-3 rounded-lg">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M5 21v-4M3 17h4m10-4h4m-2 2v4m2-12v4m-4 0h4" />
                            </svg>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Workout Log -->
            <div class="bg-white rounded-lg shadow overflow-hidden mb-8">
                <div class="bg-gray-800 text-white px-6 py-4 flex justify-between items-center">
                    <h2 class="text-xl font-semibold">Today's Workout</h2>
                    <button id="addWorkoutBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                        </svg>
                        <span>Add Exercise</span>
                    </button>
                </div>
                
                <div id="workoutContainer" class="divide-y divide-gray-200">
                    <!-- Workout items will be added here -->
                </div>
            </div>
            
            <!-- Progress Chart -->
            <div class="bg-white rounded-lg shadow p-6 mb-8">
                <h2 class="text-xl font-semibold mb-6 text-gray-800">Weekly Progress</h2>
                <div class="h-64">
                    <canvas id="progressChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Exercise Library Content -->
        <div id="exercisesContent" class="tab-content hidden">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-semibold text-gray-800">Exercise Library</h2>
                <div class="relative w-64">
                    <input type="text" id="exerciseSearch" placeholder="Search exercises..." class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <i class="fas fa-search absolute right-3 top-3 text-gray-400"></i>
                </div>
            </div>
            
            <div class="mb-6 flex space-x-2 overflow-x-auto pb-2">
                <button class="exercise-filter-btn px-4 py-2 bg-blue-500 text-white rounded-full text-sm font-medium" data-category="all">All</button>
                <button class="exercise-filter-btn px-4 py-2 bg-gray-200 text-gray-700 rounded-full text-sm font-medium hover:bg-gray-300" data-category="cardio">Cardio</button>
                <button class="exercise-filter-btn px-4 py-2 bg-gray-200 text-gray-700 rounded-full text-sm font-medium hover:bg-gray-300" data-category="strength">Strength</button>
                <button class="exercise-filter-btn px-4 py-2 bg-gray-200 text-gray-700 rounded-full text-sm font-medium hover:bg-gray-300" data-category="flexibility">Flexibility</button>
                <button class="exercise-filter-btn px-4 py-2 bg-gray-200 text-gray-700 rounded-full text-sm font-medium hover:bg-gray-300" data-category="hiit">HIIT</button>
            </div>
            
            <div id="exerciseLibrary" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Exercises will be loaded here -->
            </div>
        </div>

        <!-- My Workouts Content -->
        <div id="workoutContent" class="tab-content hidden">
            <h2 class="text-2xl font-semibold mb-6 text-gray-800">My Workout History</h2>
            
            <div id="workoutHistory" class="space-y-4">
                <!-- Workout history items will be added here -->
            </div>
        </div>

        <!-- Progress Content -->
        <div id="progressContent" class="tab-content hidden">
            <h2 class="text-2xl font-semibold mb-6 text-gray-800">Your Progress</h2>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div class="bg-white p-6 rounded-lg shadow">
                    <h3 class="text-lg font-semibold mb-4">Monthly Activity Summary</h3>
                    <div class="h-64">
                        <canvas id="monthlyActivityChart"></canvas>
                    </div>
                </div>
                
                <div class="bg-white p-6 rounded-lg shadow">
                    <h3 class="text-lg font-semibold mb-4">Exercise Distribution</h3>
                    <div class="h-64">
                        <canvas id="exerciseDistributionChart"></canvas>
                    </div>
                </div>
            </div>
            
            <div class="bg-white p-6 rounded-lg shadow mt-6">
                <h3 class="text-lg font-semibold mb-4">Personal Records</h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="p-4 bg-gray-50 rounded-lg">
                        <div class="text-sm text-gray-500 mb-1">Best Running Distance</div>
                        <div class="text-2xl font-bold">5.2 <span class="text-lg text-gray-500">miles</span></div>
                    </div>
                    <div class="p-4 bg-gray-50 rounded-lg">
                        <div class="text-sm text-gray-500 mb-1">Heaviest Lift</div>
                        <div class="text-2xl font-bold">225 <span class="text-lg text-gray-500">lbs</span></div>
                    </div>
                    <div class="p-4 bg-gray-50 rounded-lg">
                        <div class="text-sm text-gray-500 mb-1">Longest Workout</div>
                        <div class="text-2xl font-bold">85 <span class="text-lg text-gray-500">mins</span></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Add Workout Modal -->
    <div id="addWorkoutModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg w-full max-w-md p-6 m-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-semibold text-gray-800">Add New Exercise</h3>
                <button id="closeModalBtn" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            
            <div class="space-y-4">
                <div>
                    <label for="exerciseType" class="block text-sm font-medium text-gray-700 mb-1">Exercise Type</label>
                    <select id="exerciseType" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        <option value="">Select exercise</option>
                        <option value="running">Running</option>
                        <option value="cycling">Cycling</option>
                        <option value="swimming">Swimming</option>
                        <option value="weightlifting">Weightlifting</option>
                        <option value="yoga">Yoga</option>
                        <option value="hiit">HIIT</option>
                    </select>
                </div>
                
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="duration" class="block text-sm font-medium text-gray-700 mb-1">Duration (min)</label>
                        <input type="number" id="duration" min="1" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    <div>
                        <label for="intensity" class="block text-sm font-medium text-gray-700 mb-1">Intensity</label>
                        <select id="intensity" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                            <option value="low">Low</option>
                            <option value="medium" selected>Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                </div>
                
                <div>
                    <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                    <textarea id="notes" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" placeholder="Any additional details..."></textarea>
                </div>
                
                <div class="grid grid-cols-2 gap-4">
                    <div id="distanceField" class="hidden">
                        <label for="distance" class="block text-sm font-medium text-gray-700 mb-1">Distance (miles)</label>
                        <input type="number" id="distance" min="0.1" step="0.1" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    </div>
                    <div id="weightField" class="hidden">
                        <label for="weight" class="block text-sm font-medium text-gray-700 mb-1">Weight (lbs)</label>
                        <input type="number" id="weight" min="1" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 pt-4">
                    <button id="cancelWorkoutBtn" type="button" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">Cancel</button>
                    <button id="saveWorkoutBtn" type="button" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">Save Exercise</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Exercise Details Modal -->
    <div id="exerciseDetailModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg w-full max-w-2xl p-6 m-4 max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h3 id="exerciseModalTitle" class="text-xl font-semibold text-gray-800"></h3>
                <button id="closeDetailModalBtn" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            
            <div id="exerciseModalContent" class="space-y-4">
                <!-- Content will be populated dynamically -->
            </div>
            
            <div class="flex justify-end pt-6">
                <button id="logExerciseBtn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">Log This Exercise</button>
            </div>
        </div>
    </div>

    <script>
        // Main application state
        const state = {
            workouts: [],
            exercises: [
                {
                    id: 1,
                    name: "Running",
                    category: "cardio",
                    description: "Running is a method of terrestrial locomotion allowing humans to move rapidly on foot.",
                    caloriesPerMin: 10,
                    image: "https://www.hoteldesartssaigon.com/wellness/fitness-centre/running.jpg",
                    instructions: "1. Start with a 5-minute warm-up walk\n2. Gradually increase pace to jogging\n3. Maintain good posture with arms at 90 degrees\n4. Land mid-foot, not on your heels\n5. Breathe deeply and consistently",
                    musclesWorked: ["Legs", "Core", "Cardiovascular System"]
                },
                {
                    id: 2,
                    name: "Push-ups",
                    category: "strength",
                    description: "A common calisthenics exercise that strengthens chest, shoulders and triceps.",
                    caloriesPerMin: 5,
                    image: "https://placehold.co/600x400?text=Push-ups",
                    instructions: "1. Start in plank position with hands shoulder-width apart\n2. Lower body until chest nearly touches floor\n3. Push back up to starting position\n4. Keep core engaged and back straight throughout\n5. Modify on knees if needed",
                    musclesWorked: ["Chest", "Shoulders", "Triceps", "Core"]
                },
                {
                    id: 3,
                    name: "Yoga",
                    category: "flexibility",
                    description: "A group of physical, mental, and spiritual practices originating in ancient India.",
                    caloriesPerMin: 3,
                    image: "https://placehold.co/600x400?text=Yoga",
                    instructions: "1. Start with breathing exercises (pranayama)\n2. Move through basic poses like downward dog, warrior, tree\n3. Focus on proper alignment\n4. Hold poses for several breaths\n5. End with relaxation (savasana)",
                    musclesWorked: ["Full Body", "Core", "Flexibility"]
                },
                {
                    id: 4,
                    name: "Cycling",
                    category: "cardio",
                    description: "Riding bicycles for transport, recreation, exercise or sport.",
                    caloriesPerMin: 8,
                    image: "https://placehold.co/600x400?text=Cycling",
                    instructions: "1. Adjust seat height so your leg is almost extended at bottom\n2. Start pedaling at moderate resistance\n3. Maintain steady pace\n4. Use proper hand positioning\n5. Stay hydrated during longer rides",
                    musclesWorked: ["Legs", "Glutes", "Core", "Cardiovascular System"]
                },
                {
                    id: 5,
                    name: "Deadlifts",
                    category: "strength",
                    description: "A weight training exercise where a loaded barbell is lifted off the ground.",
                    caloriesPerMin: 7,
                    image: "https://placehold.co/600x400?text=Deadlifts",
                    instructions: "1. Stand with feet hip-width apart\n2. Bend at hips and knees to grip barbell\n3. Keep back straight as you lift\n4. Stand tall at top position\n5. Lower barbell with controlled motion",
                    musclesWorked: ["Back", "Legs", "Glutes", "Core"]
                },
                {
                    id: 6,
                    name: "Burpees",
                    category: "hiit",
                    description: "A full body exercise used in strength training and as anaerobic exercise.",
                    caloriesPerMin: 12,
                    image: "https://placehold.co/600x400?text=Burpees",
                    instructions: "1. Start standing\n2. Drop into squat position and place hands on floor\n3. Kick feet back into plank\n4. Do push-up (optional)\n5. Jump feet back to hands\n6. Explode up with jump",
                    musclesWorked: ["Full Body", "Core", "Cardiovascular System"]
                },
                {
                    id: 7,
                    name: "Pull-ups",
                    category: "strength",
                    description: "An upper body exercise where you lift your entire body up.",
                    caloriesPerMin: 6,
                    image: "https://placehold.co/600x400?text=Pull-ups",
                    instructions: "1. Grab bar with palms facing away\n2. Hang with arms fully extended\n3. Pull up until chin clears bar\n4. Lower slowly to full extension\n5. Use assistance if needed",
                    musclesWorked: ["Back", "Biceps", "Shoulders"]
                },
                {
                    id: 8,
                    name: "Squats",
                    category: "strength",
                    description: "A strength exercise where the trainee lowers their hips from a standing position.",
                    caloriesPerMin: 8,
                    image: "https://placehold.co/600x400?text=Squats",
                    instructions: "1. Stand with feet shoulder-width apart\n2. Lower your hips back and down\n3. Keep chest up and knees behind toes\n4. Go as low as comfortable\n5. Push through heels to return up",
                    musclesWorked: ["Legs", "Glutes", "Core"]
                }
            ]
        };

        // DOM Elements
        const workoutContainer = document.getElementById('workoutContainer');
        const addWorkoutBtn = document.getElementById('addWorkoutBtn');
        const addWorkoutModal = document.getElementById('addWorkoutModal');
        const closeModalBtn = document.getElementById('closeModalBtn');
        const cancelWorkoutBtn = document.getElementById('cancelWorkoutBtn');
        const saveWorkoutBtn = document.getElementById('saveWorkoutBtn');
        const exerciseTypeSelect = document.getElementById('exerciseType');
        const durationInput = document.getElementById('duration');
        const intensitySelect = document.getElementById('intensity');
        const notesTextarea = document.getElementById('notes');
        const distanceField = document.getElementById('distanceField');
        const weightField = document.getElementById('weightField');
        const distanceInput = document.getElementById('distance');
        const weightInput = document.getElementById('weight');
        const exerciseLibrary = document.getElementById('exerciseLibrary');
        const exerciseDetailModal = document.getElementById('exerciseDetailModal');
        const exerciseModalTitle = document.getElementById('exerciseModalTitle');
        const exerciseModalContent = document.getElementById('exerciseModalContent');
        const logExerciseBtn = document.getElementById('logExerciseBtn');
        const closeDetailModalBtn = document.getElementById('closeDetailModalBtn');
        const workoutHistory = document.getElementById('workoutHistory');
        const exerciseSearch = document.getElementById('exerciseSearch');
        const exerciseFilterBtns = document.querySelectorAll('.exercise-filter-btn');
        
        // Tab elements
        const dashboardTab = document.getElementById('dashboardTab');
        const workoutTab = document.getElementById('workoutTab');
        const exercisesTab = document.getElementById('exercisesTab');
        const progressTab = document.getElementById('progressTab');
        const dashboardContent = document.getElementById('dashboardContent');
        const workoutContent = document.getElementById('workoutContent');
        const exercisesContent = document.getElementById('exercisesContent');
        const progressContent = document.getElementById('progressContent');
        
        // Chart variables
        let progressChart, monthlyActivityChart, exerciseDistributionChart;

        // Initialize the app
        function init() {
            setupEventListeners();
            renderWorkouts();
            renderExerciseLibrary();
            initCharts();
            
            // Add some sample workout data
            addSampleWorkouts();
        }
        
        // Add some sample workout data for demo
        function addSampleWorkouts() {
            const today = new Date();
            const yesterday = new Date(today);
            yesterday.setDate(yesterday.getDate() - 1);
            const twoDaysAgo = new Date(today);
            twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
            
            state.workouts = [
                {
                    id: 1,
                    exerciseId: 1,
                    date: today,
                    duration: 30,
                    intensity: 'medium',
                    distance: 3.2,
                    calories: 300,
                    notes: "Morning run in the park"
                },
                {
                    id: 2,
                    exerciseId: 5,
                    date: today,
                    duration: 20,
                    intensity: 'high',
                    weight: 185,
                    calories: 140,
                    notes: "Focusing on form"
                },
                {
                    id: 3,
                    exerciseId: 3,
                    date: yesterday,
                    duration: 45,
                    intensity: 'medium',
                    calories: 135,
                    notes: "Yoga session - great for flexibility"
                },
                {
                    id: 4,
                    exerciseId: 6,
                    date: twoDaysAgo,
                    duration: 15,
                    intensity: 'high',
                    calories: 180,
                    notes: "HIIT circuit - tough but effective"
                }
            ];
            
            renderWorkouts();
            renderWorkoutHistory();
        }
        
        // Set up event listeners
        function setupEventListeners() {
            // Workout modal
            addWorkoutBtn.addEventListener('click', () => addWorkoutModal.classList.remove('hidden'));
            closeModalBtn.addEventListener('click', () => addWorkoutModal.classList.add('hidden'));
            cancelWorkoutBtn.addEventListener('click', () => addWorkoutModal.classList.add('hidden'));
            
            // Exercise type change listener
            exerciseTypeSelect.addEventListener('change', handleExerciseTypeChange);
            
            // Save workout
            saveWorkoutBtn.addEventListener('click', saveWorkout);
            
            // Exercise details modal
            logExerciseBtn.addEventListener('click', logCurrentExercise);
            closeDetailModalBtn.addEventListener('click', () => exerciseDetailModal.classList.add('hidden'));
            
            // Exercise search
            exerciseSearch.addEventListener('input', handleExerciseSearch);
            
            // Exercise filter buttons
            exerciseFilterBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    exerciseFilterBtns.forEach(b => b.classList.remove('bg-blue-500', 'text-white'));
                    btn.classList.add('bg-blue-500', 'text-white');
                    filterExercises(btn.dataset.category);
                });
            });
            
            // Tab navigation
            dashboardTab.addEventListener('click', () => showTab('dashboard'));
            workoutTab.addEventListener('click', () => showTab('workout'));
            exercisesTab.addEventListener('click', () => showTab('exercises'));
            progressTab.addEventListener('click', () => showTab('progress'));
        }
        
        // Show/hide tabs
        function showTab(tabName) {
            // Hide all tab contents
            dashboardContent.classList.add('hidden');
            workoutContent.classList.add('hidden');
            exercisesContent.classList.add('hidden');
            progressContent.classList.add('hidden');
            
            // Remove active class from all tabs
            dashboardTab.classList.remove('active');
            workoutTab.classList.remove('active');
            exercisesTab.classList.remove('active');
            progressTab.classList.remove('active');
            
            // Show selected tab and mark as active
            switch(tabName) {
                case 'dashboard':
                    dashboardContent.classList.remove('hidden');
                    dashboardTab.classList.add('active');
                    break;
                case 'workout':
                    workoutContent.classList.remove('hidden');
                    workoutTab.classList.add('active');
                    renderWorkoutHistory();
                    break;
                case 'exercises':
                    exercisesContent.classList.remove('hidden');
                    exercisesTab.classList.add('active');
                    renderExerciseLibrary();
                    break;
                case 'progress':
                    progressContent.classList.remove('hidden');
                    progressTab.classList.add('active');
                    updateCharts();
                    break;
            }
        }
        
        // Handle exercise type change in modal
        function handleExerciseTypeChange() {
            const selectedExercise = exerciseTypeSelect.value;
            
            // Hide all optional fields
            distanceField.classList.add('hidden');
            weightField.classList.add('hidden');
            
            // Show relevant fields based on exercise type
            if (selectedExercise === 'running' || selectedExercise === 'cycling') {
                distanceField.classList.remove('hidden');
            }
            
            if (selectedExercise === 'weightlifting') {
                weightField.classList.remove('hidden');
            }
        }
        
        // Save new workout
        function saveWorkout() {
            const exerciseType = exerciseTypeSelect.value;
            const duration = parseInt(durationInput.value);
            const intensity = intensitySelect.value;
            const notes = notesTextarea.value;
            
            if (!exerciseType || !duration) {
                alert('Please select an exercise type and duration');
                return;
            }
            
            // Find selected exercise
            const exercise = state.exercises.find(ex => ex.name.toLowerCase() === exerciseType);
            
            if (!exercise) {
                alert('Invalid exercise selected');
                return;
            }
            
            // Calculate calories
            let calories;
            switch(intensity) {
                case 'low':
                    calories = exercise.caloriesPerMin * duration * 0.8;
                    break;
                case 'high':
                    calories = exercise.caloriesPerMin * duration * 1.2;
                    break;
                default:
                    calories = exercise.caloriesPerMin * duration;
            }
            
            // Create new workout object
            const newWorkout = {
                id: Date.now(), // Use timestamp as simple unique ID
                exerciseId: exercise.id,
                date: new Date(),
                duration: duration,
                intensity: intensity,
                distance: null,
                weight: null,
                calories: Math.round(calories),
                notes: notes
            };
            
            // Add optional fields if they exist
            if (distanceField.classList.contains('hidden') === false && distanceInput.value) {
                newWorkout.distance = parseFloat(distanceInput.value);
            }
            
            if (weightField.classList.contains('hidden') === false && weightInput.value) {
                newWorkout.weight = parseInt(weightInput.value);
            }
            
            // Add to state
            state.workouts.push(newWorkout);
            
            // Clear form
            exerciseTypeSelect.value = '';
            durationInput.value = '';
            intensitySelect.value = 'medium';
            notesTextarea.value = '';
            distanceInput.value = '';
            weightInput.value = '';
            
            // Close modal
            addWorkoutModal.classList.add('hidden');
            
            // Re-render workouts
            renderWorkouts();
            renderWorkoutHistory();
            updateCharts();
        }
        
        // Render workouts to the DOM
        function renderWorkouts() {
            // Clear container
            workoutContainer.innerHTML = '';
            
            // Filter today's workouts
            const today = new Date().toDateString();
            const todaysWorkouts = state.workouts.filter(workout => 
                new Date(workout.date).toDateString() === today
            );
            
            if (todaysWorkouts.length === 0) {
                workoutContainer.innerHTML = `
                    <div class="p-6 text-center text-gray-500">
                        <p>No workouts logged today. Click "Add Exercise" to get started!</p>
                    </div>
                `;
                return;
            }
            
            // Render each workout
            todaysWorkouts.forEach(workout => {
                const exercise = state.exercises.find(ex => ex.id === workout.exerciseId);
                
                if (!exercise) return;
                
                // Calculate calories per minute
                const caloriesPerMin = workout.calories / workout.duration;
                
                const workoutElement = document.createElement('div');
                workoutElement.className = 'p-6 hover:bg-gray-50 transition-colors duration-150';
                workoutElement.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div class="flex items-center">
                            <div class="w-12 h-12 rounded-md bg-blue-100 flex items-center justify-center mr-4">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                                </svg>
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-800">${exercise.name}</h3>
                                <p class="text-sm text-gray-500">
                                    ${workout.duration} min • ${workout.calories} kcal • ${workout.intensity} intensity
                                    ${workout.distance ? `• ${workout.distance} mi` : ''}
                                    ${workout.weight ? `• ${workout.weight} lbs` : ''}
                                </p>
                            </div>
                        </div>
                        <div class="text-right">
                            <span class="inline-block px-2 py-1 text-xs font-semibold rounded-full ${caloriesPerMin > 8 ? 'bg-green-100 text-green-800' : caloriesPerMin > 5 ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'}">
                                ${caloriesPerMin.toFixed(1)} kcal/min
                            </span>
                        </div>
                    </div>
                    
                    ${workout.notes ? `<div class="mt-3 text-sm text-gray-600 pl-16">${workout.notes}</div>` : ''}
                `;
                
                workoutContainer.appendChild(workoutElement);
            });
        }
        
        // Render exercise library
        function renderExerciseLibrary() {
            exerciseLibrary.innerHTML = '';
            
            state.exercises.forEach(exercise => {
                const exerciseElement = document.createElement('div');
                exerciseElement.className = 'bg-white rounded-lg shadow overflow-hidden exercise-card transition-all duration-300 cursor-pointer';
                exerciseElement.dataset.id = exercise.id;
                exerciseElement.dataset.category = exercise.category;
                exerciseElement.innerHTML = `
                    <img src="${exercise.image}" alt="${exercise.name}" class="w-full h-40 object-cover">
                    <div class="p-4">
                        <div class="flex justify-between items-start mb-2">
                            <h3 class="font-semibold text-gray-800">${exercise.name}</h3>
                            <span class="px-2 py-1 text-xs rounded-full ${getCategoryColor(exercise.category)} text-white">
                                ${exercise.category.charAt(0).toUpperCase() + exercise.category.slice(1)}
                            </span>
                        </div>
                        <p class="text-sm text-gray-600 mb-3 line-clamp-2">${exercise.description}</p>
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-500"><i class="fas fa-fire text-orange-500 mr-1"></i> ${exercise.caloriesPerMin} kcal/min</span>
                            <button class="text-blue-500 hover:text-blue-700 font-medium">View Details</button>
                        </div>
                    </div>
                `;
                
                exerciseElement.addEventListener('click', () => showExerciseDetails(exercise.id));
                exerciseLibrary.appendChild(exerciseElement);
            });
        }
        
        // Get category color class
        function getCategoryColor(category) {
            switch(category) {
                case 'cardio': return 'bg-red-500';
                case 'strength': return 'bg-blue-500';
                case 'flexibility': return 'bg-green-500';
                case 'hiit': return 'bg-purple-500';
                default: return 'bg-gray-500';
            }
        }
        
        // Show exercise details
        function showExerciseDetails(exerciseId) {
            const exercise = state.exercises.find(ex => ex.id === exerciseId);
            if (!exercise) return;
            
            exerciseModalTitle.textContent = exercise.name;
            
            exerciseModalContent.innerHTML = `
                <div class="flex flex-col md:flex-row gap-6">
                    <div class="md:w-1/3">
                        <img src="${exercise.image}" alt="${exercise.name}" class="w-full rounded-lg shadow">
                    </div>
                    <div class="md:w-2/3">
                        <div class="mb-4">
                            <h4 class="font-semibold text-gray-800 mb-2">Description</h4>
                            <p class="text-gray-600">${exercise.description}</p>
                        </div>
                        
                        <div class="mb-4">
                            <h4 class="font-semibold text-gray-800 mb-2">Instructions</h4>
                            <div class="text-gray-600 whitespace-pre-line">${exercise.instructions}</div>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <h4 class="font-semibold text-gray-800 mb-2">Calories Burned</h4>
                                <p class="text-gray-600">${exercise.caloriesPerMin} kcal per minute (average)</p>
                            </div>
                            <div>
                                <h4 class="font-semibold text-gray-800 mb-2">Muscles Worked</h4>
                                <div class="flex flex-wrap gap-2">
                                    ${exercise.musclesWorked.map(muscle => `
                                        <span class="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded">${muscle}</span>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Update log exercise button data
            logExerciseBtn.dataset.exerciseId = exercise.id;
            logExerciseBtn.dataset.exerciseName = exercise.name;
            
            exerciseDetailModal.classList.remove('hidden');
        }
        
        // Log current exercise from details modal
        function logCurrentExercise() {
            const exerciseId = parseInt(logExerciseBtn.dataset.exerciseId);
            const exerciseName = logExerciseBtn.dataset.exerciseName;
            
            // Set up modal for logging this exercise
            exerciseTypeSelect.value = exerciseName.toLowerCase();
            durationInput.value = '';
            intensitySelect.value = 'medium';
            notesTextarea.value = '';
            
            // Handle showing appropriate fields
            handleExerciseTypeChange();
            
            // Close detail modal and open workout modal
            exerciseDetailModal.classList.add('hidden');
            addWorkoutModal.classList.remove('hidden');
        }
        
        // Handle exercise search
        function handleExerciseSearch() {
            const searchTerm = exerciseSearch.value.toLowerCase();
            
            if (!searchTerm) {
                renderExerciseLibrary();
                return;
            }
            
            const filteredExercises = state.exercises.filter(exercise => 
                exercise.name.toLowerCase().includes(searchTerm) || 
                exercise.description.toLowerCase().includes(searchTerm) ||
                exercise.category.toLowerCase().includes(searchTerm)
            );
            
            exerciseLibrary.innerHTML = '';
            
            filteredExercises.forEach(exercise => {
                const exerciseElement = document.createElement('div');
                exerciseElement.className = 'bg-white rounded-lg shadow overflow-hidden exercise-card transition-all duration-300 cursor-pointer';
                exerciseElement.dataset.id = exercise.id;
                exerciseElement.dataset.category = exercise.category;
                exerciseElement.innerHTML = `
                    <img src="${exercise.image}" alt="${exercise.name}" class="w-full h-40 object-cover">
                    <div class="p-4">
                        <div class="flex justify-between items-start mb-2">
                            <h3 class="font-semibold text-gray-800">${exercise.name}</h3>
                            <span class="px-2 py-1 text-xs rounded-full ${getCategoryColor(exercise.category)} text-white">
                                ${exercise.category.charAt(0).toUpperCase() + exercise.category.slice(1)}
                            </span>
                        </div>
                        <p class="text-sm text-gray-600 mb-3 line-clamp-2">${exercise.description}</p>
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-500"><i class="fas fa-fire text-orange-500 mr-1"></i> ${exercise.caloriesPerMin} kcal/min</span>
                            <button class="text-blue-500 hover:text-blue-700 font-medium">View Details</button>
                        </div>
                    </div>
                `;
                
                exerciseElement.addEventListener('click', () => showExerciseDetails(exercise.id));
                exerciseLibrary.appendChild(exerciseElement);
            });
        }
        
        // Filter exercises by category
        function filterExercises(category) {
            if (category === 'all') {
                renderExerciseLibrary();
                return;
            }
            
            const filteredExercises = state.exercises.filter(exercise => 
                exercise.category === category
            );
            
            exerciseLibrary.innerHTML = '';
            
            filteredExercises.forEach(exercise => {
                const exerciseElement = document.createElement('div');
                exerciseElement.className = 'bg-white rounded-lg shadow overflow-hidden exercise-card transition-all duration-300 cursor-pointer';
                exerciseElement.innerHTML = `
                    <img src="${exercise.image}" alt="${exercise.name}" class="w-full h-40 object-cover">
                    <div class="p-4">
                        <div class="flex justify-between items-start mb-2">
                            <h3 class="font-semibold text-gray-800">${exercise.name}</h3>
                            <span class="px-2 py-1 text-xs rounded-full ${getCategoryColor(exercise.category)} text-white">
                                ${exercise.category.charAt(0).toUpperCase() + exercise.category.slice(1)}
                            </span>
                        </div>
                        <p class="text-sm text-gray-600 mb-3 line-clamp-2">${exercise.description}</p>
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-500"><i class="fas fa-fire text-orange-500 mr-1"></i> ${exercise.caloriesPerMin} kcal/min</span>
                            <button class="text-blue-500 hover:text-blue-700 font-medium">View Details</button>
                        </div>
                    </div>
                `;
                
                exerciseElement.addEventListener('click', () => showExerciseDetails(exercise.id));
                exerciseLibrary.appendChild(exerciseElement);
            });
        }
        
        // Render workout history
        function renderWorkoutHistory() {
            workoutHistory.innerHTML = '';
            
            if (state.workouts.length === 0) {
                workoutHistory.innerHTML = `
                    <div class="bg-white rounded-lg shadow p-6 text-center text-gray-500">
                        <p>No workout history yet. Get started by logging your first exercise!</p>
                    </div>
                `;
                return;
            }
            
            // Group workouts by date
            const workoutsByDate = {};
            state.workouts.forEach(workout => {
                const dateStr = new Date(workout.date).toDateString();
                if (!workoutsByDate[dateStr]) {
                    workoutsByDate[dateStr] = [];
                }
                workoutsByDate[dateStr].push(workout);
            });
            
            // Sort dates in descending order
            const sortedDates = Object.keys(workoutsByDate).sort((a, b) => new Date(b) - new Date(a));
            
            // Render each date's workouts
            sortedDates.forEach(dateStr => {
                const date = new Date(dateStr);
                const today = new Date();
                const yesterday = new Date(today);
                yesterday.setDate(yesterday.getDate() - 1);
                
                let dateDisplay;
                if (date.toDateString() === today.toDateString()) {
                    dateDisplay = 'Today';
                } else if (date.toDateString() === yesterday.toDateString()) {
                    dateDisplay = 'Yesterday';
                } else {
                    dateDisplay = date.toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' });
                }
                
                const dateElement = document.createElement('div');
                dateElement.className = 'mb-6';
                dateElement.innerHTML = `
                    <h3 class="text-lg font-semibold mb-3 text-gray-800">${dateDisplay}</h3>
                    <div class="space-y-3">
                        ${workoutsByDate[dateStr].map(workout => {
                            const exercise = state.exercises.find(ex => ex.id === workout.exerciseId);
                            if (!exercise) return '';
                            
                            return `
                                <div class="bg-white rounded-lg shadow p-4">
                                    <div class="flex items-start">
                                        <div class="flex-shrink-0 bg-blue-100 p-2 rounded-lg mr-4">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                                            </svg>
                                        </div>
                                        <div class="flex-grow">
                                            <h4 class="font-semibold text-gray-800">${exercise.name}</h4>
                                            <p class="text-sm text-gray-500 mb-2">
                                                ${workout.duration} min • ${workout.calories} kcal • ${workout.intensity} intensity
                                                ${workout.distance ? `• ${workout.distance} mi` : ''}
                                                ${workout.weight ? `• ${workout.weight} lbs` : ''}
                                            </p>
                                            ${workout.notes ? `<p class="text-sm text-gray-600">${workout.notes}</p>` : ''}
                                        </div>
                                    </div>
                                </div>
                            `;
                        }).join('')}
                    </div>
                `;
                
                workoutHistory.appendChild(dateElement);
            });
        }
        
        // Initialize charts
        function initCharts() {
            // Weekly Progress Chart
            const progressCtx = document.getElementById('progressChart').getContext('2d');
            progressChart = new Chart(progressCtx, {
                type: 'line',
                data: {
                    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                    datasets: [
                        {
                            label: 'Calories Burned',
                            data: [320, 450, 280, 410, 350, 520, 380],
                            borderColor: 'rgba(59, 130, 246, 0.8)',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            tension: 0.3,
                            fill: true
                        },
                        {
                            label: 'Active Minutes',
                            data: [45, 60, 35, 50, 42, 75, 55],
                            borderColor: 'rgba(139, 92, 246, 0.8)',
                            backgroundColor: 'rgba(139, 92, 246, 0.1)',
                            tension: 0.3,
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            // Monthly Activity Chart
            const monthlyActivityCtx = document.getElementById('monthlyActivityChart').getContext('2d');
            monthlyActivityChart = new Chart(monthlyActivityCtx, {
                type: 'bar',
                data: {
                    labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
                    datasets: [
                        {
                            label: 'Calories',
                            data: [1250, 1870, 1420, 2100],
                            backgroundColor: 'rgba(59, 130, 246, 0.7)'
                        },
                        {
                            label: 'Workouts',
                            data: [3, 4, 3, 5],
                            backgroundColor: 'rgba(16, 185, 129, 0.7)'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            // Exercise Distribution Chart
            const exerciseDistCtx = document.getElementById('exerciseDistributionChart').getContext('2d');
            exerciseDistributionChart = new Chart(exerciseDistCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Cardio', 'Strength', 'Flexibility', 'HIIT'],
                    datasets: [{
                        data: [35, 40, 15, 10],
                        backgroundColor: [
                            'rgba(239, 68, 68, 0.7)',
                            'rgba(59, 130, 246, 0.7)',
                            'rgba(16, 185, 129, 0.7)',
                            'rgba(139, 92, 246, 0.7)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                        }
                    }
                }
            });
        }
        
        // Update charts with new data
        function updateCharts() {
            // In a real app, you would recalculate these based on the updated workout data
            // For this demo, we'll just keep static data for simplicity
        }

        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
